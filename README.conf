
General

  The configuration files under 'conf' are expressed in YAML. They are parsed by
  the test-suite core driver and instantiated as hash and array containers.
  Inside Run objects and the methods they call, an 'env' environment object is
  available whose 'build' and 'run' members expose the contents of the build and
  run configs, respectively.

  - Build configs are represented as the YAML equivalents of nested hashes and
    contain the information necessary to construct commands for performing a
    build via the external build-automation system. Their content, then, depends
    on the requirements of that system and the interface to it defined in the
    core driver and library. Like run configs (see below), build configs can be
    composed via the 'extends' key.

  - Run configs are represented as the YAML equivalents of nested hashes and
    contain the information necessary to prepare, configure, execute, and verify
    a run, to associate it with a baseline image, etc. Config contents will
    depend on the model and platform, but several top-level keys are reserved:
    
    - [required] The 'baseline' key specifies the name of the baseline image
      into which this run's output should (potentially) be copied, or against
      which this run's output should be compared. Runs whose output is expected
      to be identical should share a common 'baseline' value. To exclude a run
      from baseline participation, specify the value 'none'.

    - [required] The 'build' key specifies the name of the build (i.e. the
      filename of a build config) to use for this run.

    - [required] The 'profile' key specifies the name of a Ruby module (defined
      in profiles.rb) that may be used to alias required method names to
      platform-specific versions in library.rb. Due to Ruby naming rules,
      'profile' values must begin with an upper-case letter.

    - [optional] The 'extends' key specifies the name of a run config from which
      the current one should inherit, and which is may override. Rrecursion is
      supported, but loops are fatal errors.

  - Suite configs are represented as the YAML equivalent of an array-of-arrays.
    Each outer array element names a group of runs expected to produce identical
    output, whose output will be compared together for bitwise identity. Inner
    array elements are the names of runs (i.e. filenames of run configs).

    The following reserved keys are available:

    - [optional] The 'retain_builds' key, defined with any non-false/non-nil
      value, indicates that the core driver should not delete existing builds.    

  - In addition to those already listed, key names beginning with an underscore
    are reserved. In particular, the following keys are made available by the
    core driver to library methods:

    - env.build._result: The final value returned by the run thread that
      performs a build (potentially on behalf of a group of runs that require
      the same build).

    - env.build._root: The path to the top-level directory containing all builds
      performed for the test suite.

    - env.run._name: The name of the run, as reported e.g. in log entries.

  - Running the test suite with arguments 'show suite <suite_name>' or
    'show run <run_name>' will show the complete form of a suite or run config,
    respectively.

Quoting Rules for Fortran Namelists

  If namelist editing is to be performed, please note that, in general, values
  recognized as strings in YAML are instantiated as Ruby String objects. Some
  caveats:

  - YAML casts some unquoted strings to primitive data types. For example, the
    unquoted word 'yes' will be instantiated as a Ruby 'true' boolean. There are
    a number of similar cases. When casting yields unwated behavior, explicitly
    quote the problematic value in the config. A conservative solution is to
    quote all strings.

  - The YAML library would normally print Ruby string objects without enclosing
    quotes, whether or not they are quoted in the config. For example, values
    abc, 'abc' and "abc" would all be printed without quotes. The core driver
    adds single quotes around all String values when writing Fortran namelists
    so that, for the previous example, all three values would appear as 'abc'
    (i.e. in single quotes). Sometimes this isn't what's needed. For example,
    the Fortran primitive value .true. will be recognized by YAML as a string,
    but must appear unquoted in a namelist. To support this, a value may be
    preceded by the tag !unquoted in a YAML config to suppress quoting of that
    value. For example, the YAML entries

      gribout: !unquoted  .true.
      gribout: !unquoted '.true.'
      gribout: !unquoted ".true."

    would all result in the Fortran namelist entry

      gribout=.true.

  - Values recognized as numbers will be written without quotes. If quotes are
    desired, explicitly quote the value in the config so that it is recognized
    as a string.

