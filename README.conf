
General

  The configuration files under 'conf' are expressed in YAML. They are parsed by
  test-suite code and instantiated as hash and array containers.

  - Build configs are used to construct the commands necessary to perform a
    a desired build via the external build-automation system, so their content
    is dependent on that system and the interface to it defined in the test-
    suite code.

  - Runs are represented as nested hashes. The top-level "namelists" key points
    to a hash-of-hashes each of whose keys is an individual namelist name, and
    whose values are flat hashes storing the variable=value pairs for that
    namelist. Namelist values that should be enclosed in quotes in the Fortran
    namelist should likewise be enclosed in quotes in the config. The top-level
    "extends" key provides the name of a parent run configuration that the
    current one should subclass, with the child's values overriding those of the
    parent. An arbitrary level of recursion is supported, but loops are detected
    as fatal errors. The top-level "baseline" key specifies a name for the
    baseline subdirectory to which this run's output should (potentially) be
    copied when creating a baseline, or against which this run's output should
    be compared. Runs whose output is expected to be identical should share a
    common "baseline" value. The top-level "profile" key specifies the name of a
    Ruby module that should be used to extend individual instances of the test
    suite's Run class, providing access to methods specific to the model or
    platform. These values must correspond to module names defined in the
    profile code and, due to Ruby naming restrictions, must (at least) begin
    with an upper-case letter.

  - Each bottom-level array of run names in a suite config represents a list of
    runs whose output will be tested for bitwise identity. Also, one run from
    each such list will contribute its output to a baseline image if one is
    being generated.

Quoting Rules for Fortran Namelists

  - In general, values recognized as strings in YAML are instantiated as Ruby
    String objects. Some caveats:

  - YAML casts some unquoted strings to primitive data types. For example, the
    unquoted word yes will be instantiated as a Ruby true boolean. There are a
    number of such cases. When casting produces unwated behavior, quote the
    problematic string in the config.

  - Ruby string objects would normally be printed without enclosing quote marks,
    whether or not they are quoted in the config. For example, the config values
    abc, 'abc' and "abc" would all be printed without quotes. The test-suite
    automatically encloses all String values in single quotes when writing them
    to Fortran namelist files so that, for the previous example, all three
    values would appear in a namelist file as 'abc' (in single quotes).
    Sometimes this isn't what's needed. For example, the Fortran primitive value
    .true. will be recognized as a string in a YAML config, but must appear
    unquoted in a namelist. To support this, a value may be preceded by the tag
    !unquoted in a YAML config to prevent the automatic quoting of that value.
    For example, the YAML entries

      gribout: !unquoted  .true.
      gribout: !unquoted '.true.'
      gribout: !unquoted ".true."

    would all result in the Fortran namelist entry

      gribout=.true.

  - Values recognized as numbers will be written without quotes. If a numeric
    value should be enclosed in quotes in a Fortran namelist, manually enclose
    it in quotes in the YAML config to ensure that it is recognized as a string.
    When in doubt, ues the 'ddts show run <name>' command to see what you'll
    get.

