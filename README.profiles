
Overview

  library.rb contains methods defining the interface between the test suite and
  the model and platform. profiles.rb contains modules used to extend individual
  test-suite Run objects with appropriate library methods. Each such module
  starts by including all of the library methods as defaults, then defines
  aliases for any methods for which the default must be overridden. The section
  'Model/Platform Methods', below, describes the methods called by the core
  driver. Each must be implemented.

  Library methods should not use instance variables. Communication with the core
  driver or with other library methods may be done either via method arguments,
  or via the passed-in 'env' environment object. (The 'env' OpenStruct object
  has .build, .run and .suite members that expose the contents of the respective
  configs) New members may be added to env.[build|run|suite], or to env itself,
  as needed.)

Model/Platform Methods

  These methods are called directly by the core driver. An environment object
  (see above) is passed in as the first argument to each method; it may be
  inspected in each method to determine what information it contains.

  Other methods useful to a specific model or platform may be implemented as
  needed.

  lib_build(env) 

    Returns an array, potentially containing build output or other data, to be
    passed to lib_build_post(); the actual contents should be determined by the
    needs of that method. Performs the build described by env.build, or halts
    the test suite if the build fails.

  lib_build_post(env,output)

    Returns a string containing the path to a directory that should be copied
    into the test suite's 'runs' directory to be used by a single run. An array
    of strings (possibly representing the output from the build) is provided via
    the 'output' argument.

  lib_build_prep(env)

    Return value is unused. Takes any actions required prior to performing the
    build.

  lib_data(env)

    Return value is unused. Takes actions necessary to create, populate, verify,
    etc., in the top-level test-suite directory, a 'data' directory containing
    data files to be used by the test-suite runs. To allow for automated clean-
    up, if this method places a data-archive file in the top-level test-suite
    directory, it should be named 'data.tgz'; if a data directory is created, it
    should be named 'data'.

  lib_outfiles(env,path)

    Returns an array containing the pathnames of the files that will be (1)
    added to this run's baseline if one is being produced; (2) compared against
    an existing baseline, if baseline comparison is being performed; and (3)
    compared against comparable runs. The 'path' argument specifies a directory
    under which the run's unique output can be found. Each entry in the returned
    array is in the form [path1,path2], where path1+path2 forms the absolute
    path to an output file, and path2 is the suffix of the path that is (a) the
    same across runs in the comparison group; and (b) what should be stored in a
    baseline image.

  lib_queue_del_cmd(env)

    Returns a string containing the name of the external program to run to
    delete a job from the queue system, given its ID as an argument.

  lib_re_str_success(env)

    Returns the string expected to appear in the model binary's stdout to
    indicate that the run completed successfully.

  lib_run(env,rundir)

    Returns a string containing the path to the run's stdout. Performs a run.

  lib_run_post(env)

    Return value is unused. Take any actions necessary following a successful
    run, before the test suite proceeds to output comparision.

  lib_run_prep(env,rundir)

    Returns a string containing the path to the directory where the run should
    be started (perhaps via queue submission). Takes any actions required prior
    to starting the run. The 'rundir' argument contains the name of a unique
    directory to be used by this run.

  lib_suite_post(env)

    Return value is unused. Take any actions necessary after a successful test-
    suite execution. The passed-in env object has no .build or .run members,
    only .suite.

  lib_suite_prep(env)

    Return value is unused. Take any actions necessary prior to performing the
    builds, runs and comparisons defined by the test suite. The passed-in env
    object has no .build or .run members, only .suite.

